{
  "address": "0x90991F301b2e076dC6Bc6F4942f97b3c71Ba92b2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IEAS",
          "name": "eas",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "contract VerifiableAttester",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x14da49b936a15d1f02b9ac18e8f519bdb58bb2ccf74a219f1a6ab30bc80402e8",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x2aC77812F63fE55B150361dB8E86b8Cee9002700",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "2160090",
    "logsBloom": "0x
    "blockHash": "0xce80cb9aad1116015647f8972cda8019508819c0e611979cfcbbdf6e7de05d63",
    "transactionHash": "0x14da49b936a15d1f02b9ac18e8f519bdb58bb2ccf74a219f1a6ab30bc80402e8",
    "logs": [],
    "blockNumber": 9425061,
    "cumulativeGasUsed": "2206967",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "e34fc03ecc974921a8fe17c9dc2072ab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEAS\",\"name\":\"eas\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract VerifiableAttester\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"create(address,address,string,string)\":{\"params\":{\"admin\":\"Address of the admin of the VerifiableAttester contract.\",\"description\":\"Description of the collection of attestations in the contract.\",\"eas\":\"Address of the EAS contract to make attestations to.\",\"name\":\"Name of the collection of attestations in the contract.\"},\"returns\":{\"_0\":\"Address of the created VerifiableAttester contract.\"}}},\"title\":\"VerifiableAttesterFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"create(address,address,string,string)\":{\"notice\":\"Creates a new VerifiableAttester contract.\"}},\"notice\":\"The VerifiableAttesterFactory is a factory contract for VerifiableAttester contracts.         VerifiableAttester contracts are created via CREATE2 and must have a collection name         that must be unique per EAS contract. Using CREATE2 allows offchain actors to verify         that a VerifiableAttester contract deployed through this factory.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/VerifiableAttesterFactory.sol\":\"VerifiableAttesterFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/**\\n * @dev A struct representing EIP712 signature data.\\n */\\nstruct EIP712Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/**\\n * @dev A struct representing a single attestation.\\n */\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\",\"keccak256\":\"0x5fe04805a7a589d8a581ab295fc0c480c52189f6d52a009c585df0427cec70af\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { Attestation, EIP712Signature } from \\\"./Common.sol\\\";\\n\\n/**\\n * @dev A struct representing the arguments of the attestation request.\\n */\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the attestation request.\\n */\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the full delegated attestation request.\\n */\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi attestation request.\\n */\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi attestation request.\\n */\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the revocation request.\\n */\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the revocation request.\\n */\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the full delegated revocation request.\\n */\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi revocation request.\\n */\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi revocation request.\\n */\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @title EAS - Ethereum Attestation Service interface.\\n */\\ninterface IEAS {\\n    /**\\n     * @dev Emitted when an attestation has been made.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param uid The UID the revoked attestation.\\n     * @param schema The UID of the schema.\\n     */\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when an attestation has been revoked.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param schema The UID of the schema.\\n     * @param uid The UID the revoked attestation.\\n     */\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when a data has been timestamped.\\n     *\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Emitted when a data has been revoked.\\n     *\\n     * @param revoker The address of the revoker.\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Returns the address of the global schema registry.\\n     *\\n     * @return The address of the global schema registry.\\n     */\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /**\\n     * @dev Attests to a specific schema.\\n     *\\n     * @param request The arguments of the attestation request.\\n     *\\n     * Example:\\n     *\\n     * attest({\\n     *     schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n     *     data: {\\n     *         recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n     *         data: \\\"0xF00D\\\",\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to a specific schema via the provided EIP712 signature.\\n     *\\n     * @param delegatedRequest The arguments of the delegated attestation request.\\n     *\\n     * Example:\\n     *\\n     * attestByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e'\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttest([{\\n     *     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n     *         data: '0x12345678',\\n     *         value: 0\\n     *     },\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Attests to multiple schemas using via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttestByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     {\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4'\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema.\\n     *\\n     * Example:\\n     *\\n     * revoke({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @param request The arguments of the revocation request.\\n     */\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema via the provided EIP712 signature.\\n     *\\n     * Example:\\n     *\\n     * revokeByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 27,\\n     *         r: '0xb593...7142',\\n     *         s: '0x0f5b...2cce'\\n     *     },\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * })\\n     *\\n     * @param delegatedRequest The arguments of the delegated revocation request.\\n     */\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevoke([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n     *         value: 0\\n     *     },\\n     * }])\\n     */\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevokeByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * }])\\n     *\\n     */\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /**\\n     * @dev Timestamps the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Timestamps the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Returns an existing attestation by UID.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return The attestation data members.\\n     */\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /**\\n     * @dev Checks whether an attestation exists.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return Whether an attestation exists.\\n     */\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd530be686226f3c8d7b02bb59797901620f64749a02228539afc8b082a1ee036\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/**\\n * @title A struct representing a record for a submitted schema.\\n */\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/**\\n * @title The global schema registry interface.\\n */\\ninterface ISchemaRegistry {\\n    /**\\n     * @dev Emitted when a new schema has been registered\\n     *\\n     * @param uid The schema UID.\\n     * @param registerer The address of the account used to register the schema.\\n     */\\n    event Registered(bytes32 indexed uid, address registerer);\\n\\n    /**\\n     * @dev Submits and reserves a new schema\\n     *\\n     * @param schema The schema data schema.\\n     * @param resolver An optional schema resolver.\\n     * @param revocable Whether the schema allows revocations explicitly.\\n     *\\n     * @return The UID of the new schema.\\n     */\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /**\\n     * @dev Returns an existing schema by UID\\n     *\\n     * @param uid The UID of the schema to retrieve.\\n     *\\n     * @return The schema data members.\\n     */\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xef47e449dd02bd034e26b1dea505ce533906f8462fc674c938ed0e872a68d640\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/**\\n * @title The interface of an optional schema resolver.\\n */\\ninterface ISchemaResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers.\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation and verifies whether it's valid.\\n     *\\n     * @param attestation The new attestation.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes multiple attestations and verifies whether they are valid.\\n     *\\n     * @param attestations The new attestations.\\n     * @param values Explicit ETH amounts which were sent with each attestation.\\n     *\\n     * @return Whether all the attestations are valid.\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\\n     *\\n     * @param attestations The existing attestations to be revoked.\\n     * @param values Explicit ETH amounts which were sent with each revocation.\\n     *\\n     * @return Whether the attestations can be revoked.\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xc628c6540da258f76192eaa34c21699c9cbcc4a4029d7ee04e88dc9c18c981fd\",\"license\":\"MIT\"},\"src/contracts/VerifiableAttester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {\\n    IEAS,\\n    MultiAttestationRequest,\\n    AttestationRequestData\\n} from \\\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\\\";\\n\\n/**\\n * @title  VerifiableAttester\\n * @notice The VerifiableAttester contract is used to make attestations to an EAS-compatible\\n *         contract in a way that allows the list of attestations made to be easily verified\\n *         offchain. Attestations can be made through this contract by an admin address until the\\n *         contract is locked. Once the contract is locked, no further attestations can be made. A\\n *         verification hash is maintained that is updated with each attestation made. Offchain\\n *         actors can easily verify all of the attestations made through this contract by checking\\n *         that the verification hash matches the expected hash for the attestations that should\\n *         have been madea. Requires that the list of attestations to be made has a fixed ordering.\\n */\\ncontract VerifiableAttester {\\n    /**\\n     * @notice Address of the EAS contract to make attestations to.\\n     */\\n    IEAS public immutable $EAS;\\n\\n    /**\\n     * @notice Address of the admin of this contract.\\n     */\\n    address public $admin;\\n\\n    /**\\n     * @notice Name of the collection of attestations in this contract.\\n     */\\n    string public $name;\\n\\n    /**\\n     * @notice Description of the collection of attestations in this contract.\\n     */\\n    string public $description;\\n\\n    /**\\n     * @notice Verification hash of the attestations made through this contract.\\n     */\\n    bytes32 public $vhash;\\n\\n    /**\\n     * @notice Whether or not this contract is locked.\\n     */\\n    bool public $locked;\\n\\n    /**\\n     * @notice Modifier that requires this contract to be uninitialized.\\n     */\\n    modifier uninitialized() {\\n        require(\\n            $admin == address(0),\\n            \\\"VerifiableAttester: contract has already been initialized\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier that requires the caller to be the admin of this contract.\\n     */\\n    modifier authenticated() {\\n        require(\\n            msg.sender == $admin,\\n            \\\"VerifiableAttester: only the contract admin can trigger this function\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier that requires this contract to be unlocked.\\n     */\\n    modifier unlocked() {\\n        require(\\n            $locked == false,\\n            \\\"VerifiableAttester: contract is locked and this function cannot be called\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @param eas  Address of the EAS contract to make attestations to.\\n     * @param name Name of the collection of attestations in this contract.\\n     */\\n    constructor(\\n        IEAS eas,\\n        string memory name\\n    ) {\\n        $EAS = eas;\\n        $name = name;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract. Separated from the constructor so that the variables here\\n     *         do not impact the initcode of the contract and therefore do not impact the resulting\\n     *         contract address.\\n     *\\n     * @param admin       Address of the admin of this contract.\\n     * @param description Description of the collection of attestations in this contract.\\n     */\\n    function initialize(\\n        address admin,\\n        string memory description\\n    )\\n        public\\n        uninitialized\\n    {\\n        $admin = admin;\\n        $description = description;\\n    }\\n\\n    /**\\n     * @notice Makes attestations to the EAS contract.\\n     *\\n     * @param requests List of MultiAttestationRequests to make attestations for.\\n     */\\n    function attest(\\n        MultiAttestationRequest[] memory requests\\n    )\\n        public\\n        authenticated\\n        unlocked\\n    {\\n        // Update the verification hash with the new attestations.\\n        for (uint256 i = 0; i < requests.length; i++) {\\n            MultiAttestationRequest memory request = requests[i];\\n            for (uint256 j = 0; j < request.data.length; j++) {\\n                $vhash = keccak256(abi.encode($vhash, request.schema, request.data[j]));\\n            }\\n        }\\n\\n        // Submit the attestations.\\n        $EAS.multiAttest(requests);\\n    }\\n\\n    /**\\n     * @notice Locks this contract.\\n     */\\n    function lock()\\n        public\\n        authenticated\\n    {\\n        $locked = true;\\n    }\\n}\\n\",\"keccak256\":\"0x077af86cec0812795b1bdc97249c916d209ac1c27ffe12de5de66a2b0fa718a1\",\"license\":\"MIT\"},\"src/contracts/VerifiableAttesterFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { IEAS } from \\\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\\\";\\nimport { VerifiableAttester } from \\\"./VerifiableAttester.sol\\\";\\n\\n/**\\n * @title  VerifiableAttesterFactory\\n * @notice The VerifiableAttesterFactory is a factory contract for VerifiableAttester contracts.\\n *         VerifiableAttester contracts are created via CREATE2 and must have a collection name\\n *         that must be unique per EAS contract. Using CREATE2 allows offchain actors to verify\\n *         that a VerifiableAttester contract deployed through this factory.\\n */\\ncontract VerifiableAttesterFactory {\\n    /**\\n     * @notice Creates a new VerifiableAttester contract.\\n     *\\n     * @param eas         Address of the EAS contract to make attestations to.\\n     * @param admin       Address of the admin of the VerifiableAttester contract.\\n     * @param name        Name of the collection of attestations in the contract.\\n     * @param description Description of the collection of attestations in the contract.\\n     *\\n     * @return Address of the created VerifiableAttester contract.\\n     */\\n    function create(\\n        IEAS eas,\\n        address admin,\\n        string memory name,\\n        string memory description\\n    )\\n        public\\n        returns (\\n            VerifiableAttester\\n        )\\n    {\\n        VerifiableAttester attester = new VerifiableAttester{salt: bytes32(0)}(eas, name);\\n        attester.initialize(admin, description);\\n        return attester;\\n    }\\n}\\n\",\"keccak256\":\"0x244cd9ec760421087661b9ae47035db6063d00c657ee0a7df49787b56bf46a24\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612632806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063c3477e981462000033575b600080fd5b6200005160048036038101906200004b91906200035c565b62000069565b60405162000060919062000477565b60405180910390f35b6000806000801b868560405162000080906200012e565b6200008d92919062000542565b8190604051809103906000f5905080158015620000ae573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663f399e22e86856040518363ffffffff1660e01b8152600401620000ee92919062000587565b600060405180830381600087803b1580156200010957600080fd5b505af11580156200011e573d6000803e3d6000fd5b5050505080915050949350505050565b61204180620005bc83390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200017d8262000150565b9050919050565b6000620001918262000170565b9050919050565b620001a38162000184565b8114620001af57600080fd5b50565b600081359050620001c38162000198565b92915050565b620001d48162000170565b8114620001e057600080fd5b50565b600081359050620001f481620001c9565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200024f8262000204565b810181811067ffffffffffffffff8211171562000271576200027062000215565b5b80604052505050565b6000620002866200013c565b905062000294828262000244565b919050565b600067ffffffffffffffff821115620002b757620002b662000215565b5b620002c28262000204565b9050602081019050919050565b82818337600083830152505050565b6000620002f5620002ef8462000299565b6200027a565b905082815260208101848484011115620003145762000313620001ff565b5b62000321848285620002cf565b509392505050565b600082601f830112620003415762000340620001fa565b5b813562000353848260208601620002de565b91505092915050565b6000806000806080858703121562000379576200037862000146565b5b60006200038987828801620001b2565b94505060206200039c87828801620001e3565b935050604085013567ffffffffffffffff811115620003c057620003bf6200014b565b5b620003ce8782880162000329565b925050606085013567ffffffffffffffff811115620003f257620003f16200014b565b5b620004008782880162000329565b91505092959194509250565b6000819050919050565b600062000437620004316200042b8462000150565b6200040c565b62000150565b9050919050565b60006200044b8262000416565b9050919050565b60006200045f826200043e565b9050919050565b620004718162000452565b82525050565b60006020820190506200048e600083018462000466565b92915050565b6000620004a1826200043e565b9050919050565b620004b38162000494565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620004f5578082015181840152602081019050620004d8565b60008484015250505050565b60006200050e82620004b9565b6200051a8185620004c4565b93506200052c818560208601620004d5565b620005378162000204565b840191505092915050565b6000604082019050620005596000830185620004a8565b81810360208301526200056d818462000501565b90509392505050565b620005818162000170565b82525050565b60006040820190506200059e600083018562000576565b8181036020830152620005b2818462000501565b9050939250505056fe60a06040523480156200001157600080fd5b506040516200204138038062002041833981810160405281019062000037919062000291565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600190816200007c919062000542565b50505062000629565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000c68262000099565b9050919050565b6000620000da82620000b9565b9050919050565b620000ec81620000cd565b8114620000f857600080fd5b50565b6000815190506200010c81620000e1565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000167826200011c565b810181811067ffffffffffffffff821117156200018957620001886200012d565b5b80604052505050565b60006200019e62000085565b9050620001ac82826200015c565b919050565b600067ffffffffffffffff821115620001cf57620001ce6200012d565b5b620001da826200011c565b9050602081019050919050565b60005b8381101562000207578082015181840152602081019050620001ea565b60008484015250505050565b60006200022a6200022484620001b1565b62000192565b90508281526020810184848401111562000249576200024862000117565b5b62000256848285620001e7565b509392505050565b600082601f83011262000276576200027562000112565b5b81516200028884826020860162000213565b91505092915050565b60008060408385031215620002ab57620002aa6200008f565b5b6000620002bb85828601620000fb565b925050602083015167ffffffffffffffff811115620002df57620002de62000094565b5b620002ed858286016200025e565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200034a57607f821691505b60208210810362000360576200035f62000302565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003ca7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200038b565b620003d686836200038b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004236200041d6200041784620003ee565b620003f8565b620003ee565b9050919050565b6000819050919050565b6200043f8362000402565b620004576200044e826200042a565b84845462000398565b825550505050565b600090565b6200046e6200045f565b6200047b81848462000434565b505050565b5b81811015620004a3576200049760008262000464565b60018101905062000481565b5050565b601f821115620004f257620004bc8162000366565b620004c7846200037b565b81016020851015620004d7578190505b620004ef620004e6856200037b565b83018262000480565b50505b505050565b600082821c905092915050565b60006200051760001984600802620004f7565b1980831691505092915050565b600062000532838362000504565b9150826002028217905092915050565b6200054d82620002f7565b67ffffffffffffffff8111156200056957620005686200012d565b5b62000575825462000331565b62000582828285620004a7565b600060209050601f831160018114620005ba5760008415620005a5578287015190505b620005b1858262000524565b86555062000621565b601f198416620005ca8662000366565b60005b82811015620005f457848901518255600182019150602085019450602081019050620005cd565b8683101562000614578489015162000610601f89168262000504565b8355505b6001600288020188555050505b505050505050565b6080516119f56200064c60003960008181610190015261040901526119f56000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063b08ab64911610066578063b08ab64914610110578063b117a0f81461012c578063bbf0487f1461014a578063f399e22e14610168578063f83d08ba1461018457610093565b80632f3d56ed14610098578063951e41e7146100b6578063af62c262146100d4578063afde6193146100f2575b600080fd5b6100a061018e565b6040516100ad919061075a565b60405180910390f35b6100be6101b2565b6040516100cb919061078e565b60405180910390f35b6100dc6101b8565b6040516100e99190610839565b60405180910390f35b6100fa610246565b604051610107919061087c565b60405180910390f35b61012a60048036038101906101259190610ddf565b61026a565b005b6101346104ac565b6040516101419190610839565b60405180910390f35b61015261053a565b60405161015f9190610e37565b60405180910390f35b610182600480360381019061017d9190610ef3565b61054d565b005b61018c610630565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b60035481565b600180546101c590610f7e565b80601f01602080910402602001604051908101604052809291908181526020018280546101f190610f7e565b801561023e5780601f106102135761010080835404028352916020019161023e565b820191906000526020600020905b81548152906001019060200180831161022157829003601f168201915b505050505081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ef90611047565b60405180910390fd5b60001515600460009054906101000a900460ff1615151461034e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610345906110ff565b60405180910390fd5b60005b815181101561040657600082828151811061036f5761036e61111f565b5b6020026020010151905060005b8160200151518110156103f1576003548260000151836020015183815181106103a8576103a761111f565b5b60200260200101516040516020016103c293929190611277565b6040516020818303038152906040528051906020012060038190555080806103e9906112e4565b91505061037c565b505080806103fe906112e4565b915050610351565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166344adc90e826040518263ffffffff1660e01b81526004016104609190611576565b6000604051808303816000875af115801561047f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104a89190611670565b5050565b600280546104b990610f7e565b80601f01602080910402602001604051908101604052809291908181526020018280546104e590610f7e565b80156105325780601f1061050757610100808354040283529160200191610532565b820191906000526020600020905b81548152906001019060200180831161051557829003601f168201915b505050505081565b600460009054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d39061172b565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806002908161062b91906118ed565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b590611047565b60405180910390fd5b6001600460006101000a81548160ff021916908315150217905550565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061072061071b610716846106db565b6106fb565b6106db565b9050919050565b600061073282610705565b9050919050565b600061074482610727565b9050919050565b61075481610739565b82525050565b600060208201905061076f600083018461074b565b92915050565b6000819050919050565b61078881610775565b82525050565b60006020820190506107a3600083018461077f565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156107e35780820151818401526020810190506107c8565b60008484015250505050565b6000601f19601f8301169050919050565b600061080b826107a9565b61081581856107b4565b93506108258185602086016107c5565b61082e816107ef565b840191505092915050565b600060208201905081810360008301526108538184610800565b905092915050565b6000610866826106db565b9050919050565b6108768161085b565b82525050565b6000602082019050610891600083018461086d565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108e8826107ef565b810181811067ffffffffffffffff82111715610907576109066108b0565b5b80604052505050565b600061091a610897565b905061092682826108df565b919050565b600067ffffffffffffffff821115610946576109456108b0565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b61096f81610775565b811461097a57600080fd5b50565b60008135905061098c81610966565b92915050565b600067ffffffffffffffff8211156109ad576109ac6108b0565b5b602082029050602081019050919050565b6109c78161085b565b81146109d257600080fd5b50565b6000813590506109e4816109be565b92915050565b600067ffffffffffffffff82169050919050565b610a07816109ea565b8114610a1257600080fd5b50565b600081359050610a24816109fe565b92915050565b60008115159050919050565b610a3f81610a2a565b8114610a4a57600080fd5b50565b600081359050610a5c81610a36565b92915050565b600080fd5b600067ffffffffffffffff821115610a8257610a816108b0565b5b610a8b826107ef565b9050602081019050919050565b82818337600083830152505050565b6000610aba610ab584610a67565b610910565b905082815260208101848484011115610ad657610ad5610a62565b5b610ae1848285610a98565b509392505050565b600082601f830112610afe57610afd6108ab565b5b8135610b0e848260208601610aa7565b91505092915050565b6000819050919050565b610b2a81610b17565b8114610b3557600080fd5b50565b600081359050610b4781610b21565b92915050565b600060c08284031215610b6357610b6261095c565b5b610b6d60c0610910565b90506000610b7d848285016109d5565b6000830152506020610b9184828501610a15565b6020830152506040610ba584828501610a4d565b6040830152506060610bb98482850161097d565b606083015250608082013567ffffffffffffffff811115610bdd57610bdc610961565b5b610be984828501610ae9565b60808301525060a0610bfd84828501610b38565b60a08301525092915050565b6000610c1c610c1784610992565b610910565b90508083825260208201905060208402830185811115610c3f57610c3e610957565b5b835b81811015610c8657803567ffffffffffffffff811115610c6457610c636108ab565b5b808601610c718982610b4d565b85526020850194505050602081019050610c41565b5050509392505050565b600082601f830112610ca557610ca46108ab565b5b8135610cb5848260208601610c09565b91505092915050565b600060408284031215610cd457610cd361095c565b5b610cde6040610910565b90506000610cee8482850161097d565b600083015250602082013567ffffffffffffffff811115610d1257610d11610961565b5b610d1e84828501610c90565b60208301525092915050565b6000610d3d610d388461092b565b610910565b90508083825260208201905060208402830185811115610d6057610d5f610957565b5b835b81811015610da757803567ffffffffffffffff811115610d8557610d846108ab565b5b808601610d928982610cbe565b85526020850194505050602081019050610d62565b5050509392505050565b600082601f830112610dc657610dc56108ab565b5b8135610dd6848260208601610d2a565b91505092915050565b600060208284031215610df557610df46108a1565b5b600082013567ffffffffffffffff811115610e1357610e126108a6565b5b610e1f84828501610db1565b91505092915050565b610e3181610a2a565b82525050565b6000602082019050610e4c6000830184610e28565b92915050565b600067ffffffffffffffff821115610e6d57610e6c6108b0565b5b610e76826107ef565b9050602081019050919050565b6000610e96610e9184610e52565b610910565b905082815260208101848484011115610eb257610eb1610a62565b5b610ebd848285610a98565b509392505050565b600082601f830112610eda57610ed96108ab565b5b8135610eea848260208601610e83565b91505092915050565b60008060408385031215610f0a57610f096108a1565b5b6000610f18858286016109d5565b925050602083013567ffffffffffffffff811115610f3957610f386108a6565b5b610f4585828601610ec5565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610f9657607f821691505b602082108103610fa957610fa8610f4f565b5b50919050565b7f56657269666961626c6541747465737465723a206f6e6c792074686520636f6e60008201527f74726163742061646d696e2063616e207472696767657220746869732066756e60208201527f6374696f6e000000000000000000000000000000000000000000000000000000604082015250565b60006110316045836107b4565b915061103c82610faf565b606082019050919050565b6000602082019050818103600083015261106081611024565b9050919050565b7f56657269666961626c6541747465737465723a20636f6e74726163742069732060008201527f6c6f636b656420616e6420746869732066756e6374696f6e2063616e6e6f742060208201527f62652063616c6c65640000000000000000000000000000000000000000000000604082015250565b60006110e96049836107b4565b91506110f482611067565b606082019050919050565b60006020820190508181036000830152611118816110dc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6111578161085b565b82525050565b611166816109ea565b82525050565b61117581610a2a565b82525050565b61118481610775565b82525050565b600081519050919050565b600082825260208201905092915050565b60006111b18261118a565b6111bb8185611195565b93506111cb8185602086016107c5565b6111d4816107ef565b840191505092915050565b6111e881610b17565b82525050565b600060c083016000830151611206600086018261114e565b506020830151611219602086018261115d565b50604083015161122c604086018261116c565b50606083015161123f606086018261117b565b506080830151848203608086015261125782826111a6565b91505060a083015161126c60a08601826111df565b508091505092915050565b600060608201905061128c600083018661077f565b611299602083018561077f565b81810360408301526112ab81846111ee565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112ef82610b17565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611321576113206112b5565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060c08301600083015161139c600086018261114e565b5060208301516113af602086018261115d565b5060408301516113c2604086018261116c565b5060608301516113d5606086018261117b565b50608083015184820360808601526113ed82826111a6565b91505060a083015161140260a08601826111df565b508091505092915050565b60006114198383611384565b905092915050565b6000602082019050919050565b600061143982611358565b6114438185611363565b93508360208202850161145585611374565b8060005b858110156114915784840389528151611472858261140d565b945061147d83611421565b925060208a01995050600181019050611459565b50829750879550505050505092915050565b60006040830160008301516114bb600086018261117b565b50602083015184820360208601526114d3828261142e565b9150508091505092915050565b60006114ec83836114a3565b905092915050565b6000602082019050919050565b600061150c8261132c565b6115168185611337565b93508360208202850161152885611348565b8060005b85811015611564578484038952815161154585826114e0565b9450611550836114f4565b925060208a0199505060018101905061152c565b50829750879550505050505092915050565b600060208201905081810360008301526115908184611501565b905092915050565b600067ffffffffffffffff8211156115b3576115b26108b0565b5b602082029050602081019050919050565b6000815190506115d381610966565b92915050565b60006115ec6115e784611598565b610910565b9050808382526020820190506020840283018581111561160f5761160e610957565b5b835b81811015611638578061162488826115c4565b845260208401935050602081019050611611565b5050509392505050565b600082601f830112611657576116566108ab565b5b81516116678482602086016115d9565b91505092915050565b600060208284031215611686576116856108a1565b5b600082015167ffffffffffffffff8111156116a4576116a36108a6565b5b6116b084828501611642565b91505092915050565b7f56657269666961626c6541747465737465723a20636f6e74726163742068617360008201527f20616c7265616479206265656e20696e697469616c697a656400000000000000602082015250565b60006117156039836107b4565b9150611720826116b9565b604082019050919050565b6000602082019050818103600083015261174481611708565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026117ad7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611770565b6117b78683611770565b95508019841693508086168417925050509392505050565b60006117ea6117e56117e084610b17565b6106fb565b610b17565b9050919050565b6000819050919050565b611804836117cf565b611818611810826117f1565b84845461177d565b825550505050565b600090565b61182d611820565b6118388184846117fb565b505050565b5b8181101561185c57611851600082611825565b60018101905061183e565b5050565b601f8211156118a1576118728161174b565b61187b84611760565b8101602085101561188a578190505b61189e61189685611760565b83018261183d565b50505b505050565b600082821c905092915050565b60006118c4600019846008026118a6565b1980831691505092915050565b60006118dd83836118b3565b9150826002028217905092915050565b6118f6826107a9565b67ffffffffffffffff81111561190f5761190e6108b0565b5b6119198254610f7e565b611924828285611860565b600060209050601f8311600181146119575760008415611945578287015190505b61194f85826118d1565b8655506119b7565b601f1984166119658661174b565b60005b8281101561198d57848901518255600182019150602085019450602081019050611968565b868310156119aa57848901516119a6601f8916826118b3565b8355505b6001600288020188555050505b50505050505056fea264697066735822122028ab6d64d558eec666e7ff391dbb99b3a82d6fb55be7b40bab6142bcbc7b3e0664736f6c63430008130033a2646970667358221220ac94aa561b31c9de8c82ac10f1ec90b608d02dfdda520e8a542c5f3789df07b064736f6c63430008130033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063c3477e981462000033575b600080fd5b6200005160048036038101906200004b91906200035c565b62000069565b60405162000060919062000477565b60405180910390f35b6000806000801b868560405162000080906200012e565b6200008d92919062000542565b8190604051809103906000f5905080158015620000ae573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663f399e22e86856040518363ffffffff1660e01b8152600401620000ee92919062000587565b600060405180830381600087803b1580156200010957600080fd5b505af11580156200011e573d6000803e3d6000fd5b5050505080915050949350505050565b61204180620005bc83390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200017d8262000150565b9050919050565b6000620001918262000170565b9050919050565b620001a38162000184565b8114620001af57600080fd5b50565b600081359050620001c38162000198565b92915050565b620001d48162000170565b8114620001e057600080fd5b50565b600081359050620001f481620001c9565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200024f8262000204565b810181811067ffffffffffffffff8211171562000271576200027062000215565b5b80604052505050565b6000620002866200013c565b905062000294828262000244565b919050565b600067ffffffffffffffff821115620002b757620002b662000215565b5b620002c28262000204565b9050602081019050919050565b82818337600083830152505050565b6000620002f5620002ef8462000299565b6200027a565b905082815260208101848484011115620003145762000313620001ff565b5b62000321848285620002cf565b509392505050565b600082601f830112620003415762000340620001fa565b5b813562000353848260208601620002de565b91505092915050565b6000806000806080858703121562000379576200037862000146565b5b60006200038987828801620001b2565b94505060206200039c87828801620001e3565b935050604085013567ffffffffffffffff811115620003c057620003bf6200014b565b5b620003ce8782880162000329565b925050606085013567ffffffffffffffff811115620003f257620003f16200014b565b5b620004008782880162000329565b91505092959194509250565b6000819050919050565b600062000437620004316200042b8462000150565b6200040c565b62000150565b9050919050565b60006200044b8262000416565b9050919050565b60006200045f826200043e565b9050919050565b620004718162000452565b82525050565b60006020820190506200048e600083018462000466565b92915050565b6000620004a1826200043e565b9050919050565b620004b38162000494565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620004f5578082015181840152602081019050620004d8565b60008484015250505050565b60006200050e82620004b9565b6200051a8185620004c4565b93506200052c818560208601620004d5565b620005378162000204565b840191505092915050565b6000604082019050620005596000830185620004a8565b81810360208301526200056d818462000501565b90509392505050565b620005818162000170565b82525050565b60006040820190506200059e600083018562000576565b8181036020830152620005b2818462000501565b9050939250505056fe60a06040523480156200001157600080fd5b506040516200204138038062002041833981810160405281019062000037919062000291565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600190816200007c919062000542565b50505062000629565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000c68262000099565b9050919050565b6000620000da82620000b9565b9050919050565b620000ec81620000cd565b8114620000f857600080fd5b50565b6000815190506200010c81620000e1565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000167826200011c565b810181811067ffffffffffffffff821117156200018957620001886200012d565b5b80604052505050565b60006200019e62000085565b9050620001ac82826200015c565b919050565b600067ffffffffffffffff821115620001cf57620001ce6200012d565b5b620001da826200011c565b9050602081019050919050565b60005b8381101562000207578082015181840152602081019050620001ea565b60008484015250505050565b60006200022a6200022484620001b1565b62000192565b90508281526020810184848401111562000249576200024862000117565b5b62000256848285620001e7565b509392505050565b600082601f83011262000276576200027562000112565b5b81516200028884826020860162000213565b91505092915050565b60008060408385031215620002ab57620002aa6200008f565b5b6000620002bb85828601620000fb565b925050602083015167ffffffffffffffff811115620002df57620002de62000094565b5b620002ed858286016200025e565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200034a57607f821691505b60208210810362000360576200035f62000302565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003ca7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200038b565b620003d686836200038b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004236200041d6200041784620003ee565b620003f8565b620003ee565b9050919050565b6000819050919050565b6200043f8362000402565b620004576200044e826200042a565b84845462000398565b825550505050565b600090565b6200046e6200045f565b6200047b81848462000434565b505050565b5b81811015620004a3576200049760008262000464565b60018101905062000481565b5050565b601f821115620004f257620004bc8162000366565b620004c7846200037b565b81016020851015620004d7578190505b620004ef620004e6856200037b565b83018262000480565b50505b505050565b600082821c905092915050565b60006200051760001984600802620004f7565b1980831691505092915050565b600062000532838362000504565b9150826002028217905092915050565b6200054d82620002f7565b67ffffffffffffffff8111156200056957620005686200012d565b5b62000575825462000331565b62000582828285620004a7565b600060209050601f831160018114620005ba5760008415620005a5578287015190505b620005b1858262000524565b86555062000621565b601f198416620005ca8662000366565b60005b82811015620005f457848901518255600182019150602085019450602081019050620005cd565b8683101562000614578489015162000610601f89168262000504565b8355505b6001600288020188555050505b505050505050565b6080516119f56200064c60003960008181610190015261040901526119f56000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063b08ab64911610066578063b08ab64914610110578063b117a0f81461012c578063bbf0487f1461014a578063f399e22e14610168578063f83d08ba1461018457610093565b80632f3d56ed14610098578063951e41e7146100b6578063af62c262146100d4578063afde6193146100f2575b600080fd5b6100a061018e565b6040516100ad919061075a565b60405180910390f35b6100be6101b2565b6040516100cb919061078e565b60405180910390f35b6100dc6101b8565b6040516100e99190610839565b60405180910390f35b6100fa610246565b604051610107919061087c565b60405180910390f35b61012a60048036038101906101259190610ddf565b61026a565b005b6101346104ac565b6040516101419190610839565b60405180910390f35b61015261053a565b60405161015f9190610e37565b60405180910390f35b610182600480360381019061017d9190610ef3565b61054d565b005b61018c610630565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b60035481565b600180546101c590610f7e565b80601f01602080910402602001604051908101604052809291908181526020018280546101f190610f7e565b801561023e5780601f106102135761010080835404028352916020019161023e565b820191906000526020600020905b81548152906001019060200180831161022157829003601f168201915b505050505081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ef90611047565b60405180910390fd5b60001515600460009054906101000a900460ff1615151461034e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610345906110ff565b60405180910390fd5b60005b815181101561040657600082828151811061036f5761036e61111f565b5b6020026020010151905060005b8160200151518110156103f1576003548260000151836020015183815181106103a8576103a761111f565b5b60200260200101516040516020016103c293929190611277565b6040516020818303038152906040528051906020012060038190555080806103e9906112e4565b91505061037c565b505080806103fe906112e4565b915050610351565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166344adc90e826040518263ffffffff1660e01b81526004016104609190611576565b6000604051808303816000875af115801561047f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104a89190611670565b5050565b600280546104b990610f7e565b80601f01602080910402602001604051908101604052809291908181526020018280546104e590610f7e565b80156105325780601f1061050757610100808354040283529160200191610532565b820191906000526020600020905b81548152906001019060200180831161051557829003601f168201915b505050505081565b600460009054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d39061172b565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806002908161062b91906118ed565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b590611047565b60405180910390fd5b6001600460006101000a81548160ff021916908315150217905550565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061072061071b610716846106db565b6106fb565b6106db565b9050919050565b600061073282610705565b9050919050565b600061074482610727565b9050919050565b61075481610739565b82525050565b600060208201905061076f600083018461074b565b92915050565b6000819050919050565b61078881610775565b82525050565b60006020820190506107a3600083018461077f565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156107e35780820151818401526020810190506107c8565b60008484015250505050565b6000601f19601f8301169050919050565b600061080b826107a9565b61081581856107b4565b93506108258185602086016107c5565b61082e816107ef565b840191505092915050565b600060208201905081810360008301526108538184610800565b905092915050565b6000610866826106db565b9050919050565b6108768161085b565b82525050565b6000602082019050610891600083018461086d565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108e8826107ef565b810181811067ffffffffffffffff82111715610907576109066108b0565b5b80604052505050565b600061091a610897565b905061092682826108df565b919050565b600067ffffffffffffffff821115610946576109456108b0565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b61096f81610775565b811461097a57600080fd5b50565b60008135905061098c81610966565b92915050565b600067ffffffffffffffff8211156109ad576109ac6108b0565b5b602082029050602081019050919050565b6109c78161085b565b81146109d257600080fd5b50565b6000813590506109e4816109be565b92915050565b600067ffffffffffffffff82169050919050565b610a07816109ea565b8114610a1257600080fd5b50565b600081359050610a24816109fe565b92915050565b60008115159050919050565b610a3f81610a2a565b8114610a4a57600080fd5b50565b600081359050610a5c81610a36565b92915050565b600080fd5b600067ffffffffffffffff821115610a8257610a816108b0565b5b610a8b826107ef565b9050602081019050919050565b82818337600083830152505050565b6000610aba610ab584610a67565b610910565b905082815260208101848484011115610ad657610ad5610a62565b5b610ae1848285610a98565b509392505050565b600082601f830112610afe57610afd6108ab565b5b8135610b0e848260208601610aa7565b91505092915050565b6000819050919050565b610b2a81610b17565b8114610b3557600080fd5b50565b600081359050610b4781610b21565b92915050565b600060c08284031215610b6357610b6261095c565b5b610b6d60c0610910565b90506000610b7d848285016109d5565b6000830152506020610b9184828501610a15565b6020830152506040610ba584828501610a4d565b6040830152506060610bb98482850161097d565b606083015250608082013567ffffffffffffffff811115610bdd57610bdc610961565b5b610be984828501610ae9565b60808301525060a0610bfd84828501610b38565b60a08301525092915050565b6000610c1c610c1784610992565b610910565b90508083825260208201905060208402830185811115610c3f57610c3e610957565b5b835b81811015610c8657803567ffffffffffffffff811115610c6457610c636108ab565b5b808601610c718982610b4d565b85526020850194505050602081019050610c41565b5050509392505050565b600082601f830112610ca557610ca46108ab565b5b8135610cb5848260208601610c09565b91505092915050565b600060408284031215610cd457610cd361095c565b5b610cde6040610910565b90506000610cee8482850161097d565b600083015250602082013567ffffffffffffffff811115610d1257610d11610961565b5b610d1e84828501610c90565b60208301525092915050565b6000610d3d610d388461092b565b610910565b90508083825260208201905060208402830185811115610d6057610d5f610957565b5b835b81811015610da757803567ffffffffffffffff811115610d8557610d846108ab565b5b808601610d928982610cbe565b85526020850194505050602081019050610d62565b5050509392505050565b600082601f830112610dc657610dc56108ab565b5b8135610dd6848260208601610d2a565b91505092915050565b600060208284031215610df557610df46108a1565b5b600082013567ffffffffffffffff811115610e1357610e126108a6565b5b610e1f84828501610db1565b91505092915050565b610e3181610a2a565b82525050565b6000602082019050610e4c6000830184610e28565b92915050565b600067ffffffffffffffff821115610e6d57610e6c6108b0565b5b610e76826107ef565b9050602081019050919050565b6000610e96610e9184610e52565b610910565b905082815260208101848484011115610eb257610eb1610a62565b5b610ebd848285610a98565b509392505050565b600082601f830112610eda57610ed96108ab565b5b8135610eea848260208601610e83565b91505092915050565b60008060408385031215610f0a57610f096108a1565b5b6000610f18858286016109d5565b925050602083013567ffffffffffffffff811115610f3957610f386108a6565b5b610f4585828601610ec5565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610f9657607f821691505b602082108103610fa957610fa8610f4f565b5b50919050565b7f56657269666961626c6541747465737465723a206f6e6c792074686520636f6e60008201527f74726163742061646d696e2063616e207472696767657220746869732066756e60208201527f6374696f6e000000000000000000000000000000000000000000000000000000604082015250565b60006110316045836107b4565b915061103c82610faf565b606082019050919050565b6000602082019050818103600083015261106081611024565b9050919050565b7f56657269666961626c6541747465737465723a20636f6e74726163742069732060008201527f6c6f636b656420616e6420746869732066756e6374696f6e2063616e6e6f742060208201527f62652063616c6c65640000000000000000000000000000000000000000000000604082015250565b60006110e96049836107b4565b91506110f482611067565b606082019050919050565b60006020820190508181036000830152611118816110dc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6111578161085b565b82525050565b611166816109ea565b82525050565b61117581610a2a565b82525050565b61118481610775565b82525050565b600081519050919050565b600082825260208201905092915050565b60006111b18261118a565b6111bb8185611195565b93506111cb8185602086016107c5565b6111d4816107ef565b840191505092915050565b6111e881610b17565b82525050565b600060c083016000830151611206600086018261114e565b506020830151611219602086018261115d565b50604083015161122c604086018261116c565b50606083015161123f606086018261117b565b506080830151848203608086015261125782826111a6565b91505060a083015161126c60a08601826111df565b508091505092915050565b600060608201905061128c600083018661077f565b611299602083018561077f565b81810360408301526112ab81846111ee565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112ef82610b17565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611321576113206112b5565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060c08301600083015161139c600086018261114e565b5060208301516113af602086018261115d565b5060408301516113c2604086018261116c565b5060608301516113d5606086018261117b565b50608083015184820360808601526113ed82826111a6565b91505060a083015161140260a08601826111df565b508091505092915050565b60006114198383611384565b905092915050565b6000602082019050919050565b600061143982611358565b6114438185611363565b93508360208202850161145585611374565b8060005b858110156114915784840389528151611472858261140d565b945061147d83611421565b925060208a01995050600181019050611459565b50829750879550505050505092915050565b60006040830160008301516114bb600086018261117b565b50602083015184820360208601526114d3828261142e565b9150508091505092915050565b60006114ec83836114a3565b905092915050565b6000602082019050919050565b600061150c8261132c565b6115168185611337565b93508360208202850161152885611348565b8060005b85811015611564578484038952815161154585826114e0565b9450611550836114f4565b925060208a0199505060018101905061152c565b50829750879550505050505092915050565b600060208201905081810360008301526115908184611501565b905092915050565b600067ffffffffffffffff8211156115b3576115b26108b0565b5b602082029050602081019050919050565b6000815190506115d381610966565b92915050565b60006115ec6115e784611598565b610910565b9050808382526020820190506020840283018581111561160f5761160e610957565b5b835b81811015611638578061162488826115c4565b845260208401935050602081019050611611565b5050509392505050565b600082601f830112611657576116566108ab565b5b81516116678482602086016115d9565b91505092915050565b600060208284031215611686576116856108a1565b5b600082015167ffffffffffffffff8111156116a4576116a36108a6565b5b6116b084828501611642565b91505092915050565b7f56657269666961626c6541747465737465723a20636f6e74726163742068617360008201527f20616c7265616479206265656e20696e697469616c697a656400000000000000602082015250565b60006117156039836107b4565b9150611720826116b9565b604082019050919050565b6000602082019050818103600083015261174481611708565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026117ad7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611770565b6117b78683611770565b95508019841693508086168417925050509392505050565b60006117ea6117e56117e084610b17565b6106fb565b610b17565b9050919050565b6000819050919050565b611804836117cf565b611818611810826117f1565b84845461177d565b825550505050565b600090565b61182d611820565b6118388184846117fb565b505050565b5b8181101561185c57611851600082611825565b60018101905061183e565b5050565b601f8211156118a1576118728161174b565b61187b84611760565b8101602085101561188a578190505b61189e61189685611760565b83018261183d565b50505b505050565b600082821c905092915050565b60006118c4600019846008026118a6565b1980831691505092915050565b60006118dd83836118b3565b9150826002028217905092915050565b6118f6826107a9565b67ffffffffffffffff81111561190f5761190e6108b0565b5b6119198254610f7e565b611924828285611860565b600060209050601f8311600181146119575760008415611945578287015190505b61194f85826118d1565b8655506119b7565b601f1984166119658661174b565b60005b8281101561198d57848901518255600182019150602085019450602081019050611968565b868310156119aa57848901516119a6601f8916826118b3565b8355505b6001600288020188555050505b50505050505056fea264697066735822122028ab6d64d558eec666e7ff391dbb99b3a82d6fb55be7b40bab6142bcbc7b3e0664736f6c63430008130033a2646970667358221220ac94aa561b31c9de8c82ac10f1ec90b608d02dfdda520e8a542c5f3789df07b064736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "create(address,address,string,string)": {
        "params": {
          "admin": "Address of the admin of the VerifiableAttester contract.",
          "description": "Description of the collection of attestations in the contract.",
          "eas": "Address of the EAS contract to make attestations to.",
          "name": "Name of the collection of attestations in the contract."
        },
        "returns": {
          "_0": "Address of the created VerifiableAttester contract."
        }
      }
    },
    "title": "VerifiableAttesterFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "create(address,address,string,string)": {
        "notice": "Creates a new VerifiableAttester contract."
      }
    },
    "notice": "The VerifiableAttesterFactory is a factory contract for VerifiableAttester contracts.         VerifiableAttester contracts are created via CREATE2 and must have a collection name         that must be unique per EAS contract. Using CREATE2 allows offchain actors to verify         that a VerifiableAttester contract deployed through this factory.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}