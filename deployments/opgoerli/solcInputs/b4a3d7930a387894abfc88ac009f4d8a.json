{
  "language": "Solidity",
  "sources": {
    "@ethereum-attestation-service/eas-contracts/contracts/Common.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\n// A representation of an empty/uninitialized UID.\nbytes32 constant EMPTY_UID = 0;\n\n// A zero expiration represents an non-expiring attestation.\nuint64 constant NO_EXPIRATION_TIME = 0;\n\nerror AccessDenied();\nerror InvalidEAS();\nerror InvalidLength();\nerror InvalidSignature();\nerror NotFound();\n\n/**\n * @dev A struct representing EIP712 signature data.\n */\nstruct EIP712Signature {\n    uint8 v; // The recovery ID.\n    bytes32 r; // The x-coordinate of the nonce R.\n    bytes32 s; // The signature data.\n}\n\n/**\n * @dev A struct representing a single attestation.\n */\nstruct Attestation {\n    bytes32 uid; // A unique identifier of the attestation.\n    bytes32 schema; // The unique identifier of the schema.\n    uint64 time; // The time when the attestation was created (Unix timestamp).\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\n    bytes32 refUID; // The UID of the related attestation.\n    address recipient; // The recipient of the attestation.\n    address attester; // The attester/sender of the attestation.\n    bool revocable; // Whether the attestation is revocable.\n    bytes data; // Custom attestation data.\n}\n"
    },
    "@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ISchemaRegistry } from \"./ISchemaRegistry.sol\";\nimport { Attestation, EIP712Signature } from \"./Common.sol\";\n\n/**\n * @dev A struct representing the arguments of the attestation request.\n */\nstruct AttestationRequestData {\n    address recipient; // The recipient of the attestation.\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    bool revocable; // Whether the attestation is revocable.\n    bytes32 refUID; // The UID of the related attestation.\n    bytes data; // Custom attestation data.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/**\n * @dev A struct representing the full arguments of the attestation request.\n */\nstruct AttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n}\n\n/**\n * @dev A struct representing the full arguments of the full delegated attestation request.\n */\nstruct DelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n    EIP712Signature signature; // The EIP712 signature data.\n    address attester; // The attesting account.\n}\n\n/**\n * @dev A struct representing the full arguments of the multi attestation request.\n */\nstruct MultiAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation request.\n}\n\n/**\n * @dev A struct representing the full arguments of the delegated multi attestation request.\n */\nstruct MultiDelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation requests.\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address attester; // The attesting account.\n}\n\n/**\n * @dev A struct representing the arguments of the revocation request.\n */\nstruct RevocationRequestData {\n    bytes32 uid; // The UID of the attestation to revoke.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/**\n * @dev A struct representing the full arguments of the revocation request.\n */\nstruct RevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n}\n\n/**\n * @dev A struct representing the arguments of the full delegated revocation request.\n */\nstruct DelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n    EIP712Signature signature; // The EIP712 signature data.\n    address revoker; // The revoking account.\n}\n\n/**\n * @dev A struct representing the full arguments of the multi revocation request.\n */\nstruct MultiRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation request.\n}\n\n/**\n * @dev A struct representing the full arguments of the delegated multi revocation request.\n */\nstruct MultiDelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation requests.\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address revoker; // The revoking account.\n}\n\n/**\n * @title EAS - Ethereum Attestation Service interface.\n */\ninterface IEAS {\n    /**\n     * @dev Emitted when an attestation has been made.\n     *\n     * @param recipient The recipient of the attestation.\n     * @param attester The attesting account.\n     * @param uid The UID the revoked attestation.\n     * @param schema The UID of the schema.\n     */\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\n\n    /**\n     * @dev Emitted when an attestation has been revoked.\n     *\n     * @param recipient The recipient of the attestation.\n     * @param attester The attesting account.\n     * @param schema The UID of the schema.\n     * @param uid The UID the revoked attestation.\n     */\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\n\n    /**\n     * @dev Emitted when a data has been timestamped.\n     *\n     * @param data The data.\n     * @param timestamp The timestamp.\n     */\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\n\n    /**\n     * @dev Emitted when a data has been revoked.\n     *\n     * @param revoker The address of the revoker.\n     * @param data The data.\n     * @param timestamp The timestamp.\n     */\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\n\n    /**\n     * @dev Returns the address of the global schema registry.\n     *\n     * @return The address of the global schema registry.\n     */\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\n\n    /**\n     * @dev Attests to a specific schema.\n     *\n     * @param request The arguments of the attestation request.\n     *\n     * Example:\n     *\n     * attest({\n     *     schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",\n     *     data: {\n     *         recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",\n     *         expirationTime: 0,\n     *         revocable: true,\n     *         refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n     *         data: \"0xF00D\",\n     *         value: 0\n     *     }\n     * })\n     *\n     * @return The UID of the new attestation.\n     */\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\n\n    /**\n     * @dev Attests to a specific schema via the provided EIP712 signature.\n     *\n     * @param delegatedRequest The arguments of the delegated attestation request.\n     *\n     * Example:\n     *\n     * attestByDelegation({\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: {\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n     *         expirationTime: 1673891048,\n     *         revocable: true,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x1234',\n     *         value: 0\n     *     },\n     *     signature: {\n     *         v: 28,\n     *         r: '0x148c...b25b',\n     *         s: '0x5a72...be22'\n     *     },\n     *     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e'\n     * })\n     *\n     * @return The UID of the new attestation.\n     */\n    function attestByDelegation(\n        DelegatedAttestationRequest calldata delegatedRequest\n    ) external payable returns (bytes32);\n\n    /**\n     * @dev Attests to multiple schemas.\n     *\n     * @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\n     * schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiAttest([{\n     *     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\n     *     data: [{\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n     *         expirationTime: 1673891048,\n     *         revocable: true,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x1234',\n     *         value: 1000\n     *     },\n     *     {\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n     *         expirationTime: 0,\n     *         revocable: false,\n     *         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\n     *         data: '0x00',\n     *         value: 0\n     *     }],\n     * },\n     * {\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n     *     data: [{\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n     *         expirationTime: 0,\n     *         revocable: true,\n     *         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\n     *         data: '0x12345678',\n     *         value: 0\n     *     },\n     * }])\n     *\n     * @return The UIDs of the new attestations.\n     */\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\n\n    /**\n     * @dev Attests to multiple schemas using via provided EIP712 signatures.\n     *\n     * @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\n     * grouped by distinct schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiAttestByDelegation([{\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: [{\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n     *         expirationTime: 1673891048,\n     *         revocable: true,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x1234',\n     *         value: 0\n     *     },\n     *     {\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n     *         expirationTime: 0,\n     *         revocable: false,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x00',\n     *         value: 0\n     *     }],\n     *     signatures: [{\n     *         v: 28,\n     *         r: '0x148c...b25b',\n     *         s: '0x5a72...be22'\n     *     },\n     *     {\n     *         v: 28,\n     *         r: '0x487s...67bb',\n     *         s: '0x12ad...2366'\n     *     }],\n     *     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4'\n     * }])\n     *\n     * @return The UIDs of the new attestations.\n     */\n    function multiAttestByDelegation(\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\n    ) external payable returns (bytes32[] memory);\n\n    /**\n     * @dev Revokes an existing attestation to a specific schema.\n     *\n     * Example:\n     *\n     * revoke({\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: {\n     *         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\n     *         value: 0\n     *     }\n     * })\n     *\n     * @param request The arguments of the revocation request.\n     */\n    function revoke(RevocationRequest calldata request) external payable;\n\n    /**\n     * @dev Revokes an existing attestation to a specific schema via the provided EIP712 signature.\n     *\n     * Example:\n     *\n     * revokeByDelegation({\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: {\n     *         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\n     *         value: 0\n     *     },\n     *     signature: {\n     *         v: 27,\n     *         r: '0xb593...7142',\n     *         s: '0x0f5b...2cce'\n     *     },\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\n     * })\n     *\n     * @param delegatedRequest The arguments of the delegated revocation request.\n     */\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\n\n    /**\n     * @dev Revokes existing attestations to multiple schemas.\n     *\n     * @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\n     * schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiRevoke([{\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: [{\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n     *         value: 1000\n     *     },\n     *     {\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n     *         value: 0\n     *     }],\n     * },\n     * {\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n     *     data: [{\n     *         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\n     *         value: 0\n     *     },\n     * }])\n     */\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\n\n    /**\n     * @dev Revokes existing attestations to multiple schemas via provided EIP712 signatures.\n     *\n     * @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests should be\n     * grouped by distinct schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiRevokeByDelegation([{\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: [{\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n     *         value: 1000\n     *     },\n     *     {\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n     *         value: 0\n     *     }],\n     *     signatures: [{\n     *         v: 28,\n     *         r: '0x148c...b25b',\n     *         s: '0x5a72...be22'\n     *     },\n     *     {\n     *         v: 28,\n     *         r: '0x487s...67bb',\n     *         s: '0x12ad...2366'\n     *     }],\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\n     * }])\n     *\n     */\n    function multiRevokeByDelegation(\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\n    ) external payable;\n\n    /**\n     * @dev Timestamps the specified bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function timestamp(bytes32 data) external returns (uint64);\n\n    /**\n     * @dev Timestamps the specified multiple bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\n\n    /**\n     * @dev Revokes the specified bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was revoked with.\n     */\n    function revokeOffchain(bytes32 data) external returns (uint64);\n\n    /**\n     * @dev Revokes the specified multiple bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was revoked with.\n     */\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\n\n    /**\n     * @dev Returns an existing attestation by UID.\n     *\n     * @param uid The UID of the attestation to retrieve.\n     *\n     * @return The attestation data members.\n     */\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\n\n    /**\n     * @dev Checks whether an attestation exists.\n     *\n     * @param uid The UID of the attestation to retrieve.\n     *\n     * @return Whether an attestation exists.\n     */\n    function isAttestationValid(bytes32 uid) external view returns (bool);\n\n    /**\n     * @dev Returns the timestamp that the specified data was timestamped with.\n     *\n     * @param data The data to query.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function getTimestamp(bytes32 data) external view returns (uint64);\n\n    /**\n     * @dev Returns the timestamp that the specified data was timestamped with.\n     *\n     * @param data The data to query.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\n}\n"
    },
    "@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ISchemaResolver } from \"./resolver/ISchemaResolver.sol\";\n\n/**\n * @title A struct representing a record for a submitted schema.\n */\nstruct SchemaRecord {\n    bytes32 uid; // The unique identifier of the schema.\n    ISchemaResolver resolver; // Optional schema resolver.\n    bool revocable; // Whether the schema allows revocations explicitly.\n    string schema; // Custom specification of the schema (e.g., an ABI).\n}\n\n/**\n * @title The global schema registry interface.\n */\ninterface ISchemaRegistry {\n    /**\n     * @dev Emitted when a new schema has been registered\n     *\n     * @param uid The schema UID.\n     * @param registerer The address of the account used to register the schema.\n     */\n    event Registered(bytes32 indexed uid, address registerer);\n\n    /**\n     * @dev Submits and reserves a new schema\n     *\n     * @param schema The schema data schema.\n     * @param resolver An optional schema resolver.\n     * @param revocable Whether the schema allows revocations explicitly.\n     *\n     * @return The UID of the new schema.\n     */\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\n\n    /**\n     * @dev Returns an existing schema by UID\n     *\n     * @param uid The UID of the schema to retrieve.\n     *\n     * @return The schema data members.\n     */\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\n}\n"
    },
    "@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { Attestation } from \"../Common.sol\";\n\n/**\n * @title The interface of an optional schema resolver.\n */\ninterface ISchemaResolver {\n    /**\n     * @dev Returns whether the resolver supports ETH transfers.\n     */\n    function isPayable() external pure returns (bool);\n\n    /**\n     * @dev Processes an attestation and verifies whether it's valid.\n     *\n     * @param attestation The new attestation.\n     *\n     * @return Whether the attestation is valid.\n     */\n    function attest(Attestation calldata attestation) external payable returns (bool);\n\n    /**\n     * @dev Processes multiple attestations and verifies whether they are valid.\n     *\n     * @param attestations The new attestations.\n     * @param values Explicit ETH amounts which were sent with each attestation.\n     *\n     * @return Whether all the attestations are valid.\n     */\n    function multiAttest(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n\n    /**\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\n     *\n     * @param attestation The existing attestation to be revoked.\n     *\n     * @return Whether the attestation can be revoked.\n     */\n    function revoke(Attestation calldata attestation) external payable returns (bool);\n\n    /**\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\n     *\n     * @param attestations The existing attestations to be revoked.\n     * @param values Explicit ETH amounts which were sent with each revocation.\n     *\n     * @return Whether the attestations can be revoked.\n     */\n    function multiRevoke(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n}\n"
    },
    "src/contracts/VerifiableAttester.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {\n    IEAS,\n    MultiAttestationRequest,\n    AttestationRequestData\n} from \"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\";\n\n/**\n * @title  VerifiableAttester\n * @notice The VerifiableAttester contract is used to make attestations to an EAS-compatible\n *         contract in a way that allows the list of attestations made to be easily verified\n *         offchain. Attestations can be made through this contract by an admin address until the\n *         contract is locked. Once the contract is locked, no further attestations can be made. A\n *         verification hash is maintained that is updated with each attestation made. Offchain\n *         actors can easily verify all of the attestations made through this contract by checking\n *         that the verification hash matches the expected hash for the attestations that should\n *         have been madea. Requires that the list of attestations to be made has a fixed ordering.\n */\ncontract VerifiableAttester {\n    /**\n     * @notice Address of the EAS contract to make attestations to.\n     */\n    IEAS public immutable $EAS;\n\n    /**\n     * @notice Address of the admin of this contract.\n     */\n    address public $admin;\n\n    /**\n     * @notice Name of the collection of attestations in this contract.\n     */\n    string public $name;\n\n    /**\n     * @notice Description of the collection of attestations in this contract.\n     */\n    string public $description;\n\n    /**\n     * @notice Verification hash of the attestations made through this contract.\n     */\n    bytes32 public $vhash;\n\n    /**\n     * @notice Whether or not this contract is locked.\n     */\n    bool public $locked;\n\n    /**\n     * @notice Modifier that requires this contract to be uninitialized.\n     */\n    modifier uninitialized() {\n        require(\n            $admin == address(0),\n            \"VerifiableAttester: contract has already been initialized\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Modifier that requires the caller to be the admin of this contract.\n     */\n    modifier authenticated() {\n        require(\n            msg.sender == $admin,\n            \"VerifiableAttester: only the contract admin can trigger this function\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Modifier that requires this contract to be unlocked.\n     */\n    modifier unlocked() {\n        require(\n            $locked == false,\n            \"VerifiableAttester: contract is locked and this function cannot be called\"\n        );\n        _;\n    }\n\n    /**\n     * @param eas  Address of the EAS contract to make attestations to.\n     * @param name Name of the collection of attestations in this contract.\n     */\n    constructor(\n        IEAS eas,\n        string memory name\n    ) {\n        $EAS = eas;\n        $name = name;\n    }\n\n    /**\n     * @notice Initializes the contract. Separated from the constructor so that the variables here\n     *         do not impact the initcode of the contract and therefore do not impact the resulting\n     *         contract address.\n     *\n     * @param admin       Address of the admin of this contract.\n     * @param description Description of the collection of attestations in this contract.\n     */\n    function initialize(\n        address admin,\n        string memory description\n    )\n        public\n        uninitialized\n    {\n        $admin = admin;\n        $description = description;\n    }\n\n    /**\n     * @notice Makes attestations to the EAS contract.\n     *\n     * @param requests List of MultiAttestationRequests to make attestations for.\n     */\n    function attest(\n        MultiAttestationRequest[] memory requests\n    )\n        public\n        authenticated\n        unlocked\n    {\n        // Update the verification hash with the new attestations.\n        for (uint256 i = 0; i < requests.length; i++) {\n            MultiAttestationRequest memory request = requests[i];\n            for (uint256 j = 0; j < request.data.length; j++) {\n                bytes memory encoded = abi.encode(request.schema, request.data[j]);\n                $vhash = keccak256(abi.encode($vhash, encoded));\n            }\n        }\n\n        // Submit the attestations.\n        $EAS.multiAttest(requests);\n    }\n\n    /**\n     * @notice Locks this contract.\n     */\n    function lock()\n        public\n        authenticated\n    {\n        $locked = true;\n    }\n}\n"
    },
    "src/contracts/VerifiableAttesterFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport { IEAS } from \"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\";\nimport { VerifiableAttester } from \"./VerifiableAttester.sol\";\n\n/**\n * @title  VerifiableAttesterFactory\n * @notice The VerifiableAttesterFactory is a factory contract for VerifiableAttester contracts.\n *         VerifiableAttester contracts are created via CREATE2 and must have a collection name\n *         that must be unique per EAS contract. Using CREATE2 allows offchain actors to verify\n *         that a VerifiableAttester contract deployed through this factory.\n */\ncontract VerifiableAttesterFactory {\n    /**\n     * @notice Creates a new VerifiableAttester contract.\n     *\n     * @param eas         Address of the EAS contract to make attestations to.\n     * @param admin       Address of the admin of the VerifiableAttester contract.\n     * @param name        Name of the collection of attestations in the contract.\n     * @param description Description of the collection of attestations in the contract.\n     *\n     * @return Address of the created VerifiableAttester contract.\n     */\n    function create(\n        IEAS eas,\n        address admin,\n        string memory name,\n        string memory description\n    )\n        public\n        returns (\n            VerifiableAttester\n        )\n    {\n        VerifiableAttester attester = new VerifiableAttester{salt: bytes32(0)}(eas, name);\n        attester.initialize(admin, description);\n        return attester;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}